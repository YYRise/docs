[{"content":"Markdown here\n","description":"test post","id":0,"section":"updates","tags":null,"title":"May 2019","uri":"https://yyrise.github.io/docs/updates/2019_may/"},{"content":"Markdown here\n","description":"test post","id":1,"section":"updates","tags":null,"title":"April 2019","uri":"https://yyrise.github.io/docs/updates/2019_april/"},{"content":"Markdown here\n","description":"test post","id":2,"section":"updates","tags":null,"title":"March 2019","uri":"https://yyrise.github.io/docs/updates/2019_march/"},{"content":"Markdown here\n","description":"test post","id":3,"section":"updates","tags":null,"title":"February 2019","uri":"https://yyrise.github.io/docs/updates/2019_february/"},{"content":"Markdown here\n","description":"test post","id":4,"section":"updates","tags":null,"title":"January 2019","uri":"https://yyrise.github.io/docs/updates/2019_january/"},{"content":"一、持久化 二、复制 三、阻塞 四、Redis内存 五、Redis内存优化 六、哨兵 七、缓存设计 ","description":"","id":5,"section":"docs","tags":null,"title":"Redis知识点","uri":"https://yyrise.github.io/docs/docs/db/redis%E7%9F%A5%E8%AF%86%E7%82%B9/"},{"content":" Sample Image: Image with title, caption, alt, ...   -- 命令  编辑当前用户的crontab crontab -e 编辑其他用户的crontab crontab -u username -e 查看当前用户的crontab crontab -l 查看其他用户的crontab crontab -u username -l  日志  执行的日志文件   /var/log/cron\n  自定义输出日志   1  0 0 * * * php /home/crontab/cli.php \u0026gt;\u0026gt; /home/crontab/cli.log 2\u0026gt;\u0026amp;1   把错误输出和标准输出都输出到 cli.log 中。\n 规则 1 2 3 4 5 6 7 8  * * * * * - - - - - | | | | | | | | | +----- day of week (0 - 7) (Sunday=0 or 7) OR sun,mon,tue,wed,thu,fri,sat | | | +---------- month (1 - 12) OR jan,feb,mar,apr ... | | +--------------- day of month (1 - 31) | +-------------------- hour (0 - 23) +------------------------- minute (0 - 59)   使用string代替    字符串 含义      @reboot Run once, at startup. 系统启动时   @yearly Run once a year, 0 0 1 1 *   @annually (same as @yearly)    @monthly Run once a month, 0 0 1 * *   @weekly Run once a week, 0 0 * * 0   @daily Run once a day, 0 0 * * *   @midnight (same as @daily)    @hourly Run once an hour, 0 * * * *    实例    例子 执行时间 备注     * * * * * 每分钟执行    */5 * * * * 每5分钟执行    0 5,17 * * * 每天 5:00和17:00执行    0 5-17 * * * 每天 5:00到17:00每小时执行    * * * * * sleep 30; sh /scripts/script.sh 每30秒执行     ","description":"","id":6,"section":"docs","tags":null,"title":"Crontab 定时任务","uri":"https://yyrise.github.io/docs/docs/linux/crontab/"},{"content":"如果想忽略掉Unix中可执行文件，\n在 .gitignore 文件的最前面添加\n1 2 3  * !*.* !*/   ","description":"","id":7,"section":"docs","tags":null,"title":"忽略无扩展名文件","uri":"https://yyrise.github.io/docs/docs/git/%E5%9C%A8.gitignore%E4%B8%AD%E5%BF%BD%E7%95%A5%E6%8E%89%E6%97%A0%E6%89%A9%E5%B1%95%E5%90%8D%E7%9A%84unix%E5%8F%AF%E6%89%A7%E8%A1%8C%E6%96%87%E4%BB%B6/"},{"content":"[TOC]\n情景一：不同的库分别 pull/push 1. 使用git命令配置 1 2 3 4 5 6 7 8 9 10 11 12  # 添加 git remote add 名字 仓库地址 # 查看远程仓库 git remote -v # origin 仓库地址 (fetch) # origin 仓库地址 (push) # 名字 仓库地址 (fetch) # 名字 仓库地址 (push) # 删除 git remote remove 名字   2. 修改.git/config 文件 1 2 3 4 5 6 7 8 9 10 11  [remote \u0026#34;origin\u0026#34;] url = 仓库地址 fetch = +refs/heads/*:refs/remotes/origin/* [remote \u0026#34;名字\u0026#34;] url = 仓库地址 fetch = +refs/heads/*:refs/remotes/origin/* [branch \u0026#34;master\u0026#34;] remote = origin remote = 名字 merge = refs/heads/master rebase = true   3. 操作 1 2  git pull/push origin [分支] git pull/push 名字 [分支]    默认是 origin 仓库\n 情景二：不同的库一次push 1. 使用git命令配置 1 2 3 4 5 6 7 8 9 10 11  # 添加 git remote set-url --add origin 仓库地址 # 查看远程仓库 git remote -v # origin 仓库地址1 (fetch) # origin 仓库地址1 (push) # origin 仓库地址2 (push) # 删除 git remote set-url --delete origin 仓库地址   2. 修改.git/config 文件 1 2 3 4 5 6 7 8  [remote \u0026#34;origin\u0026#34;] url = 仓库地址1 fetch = +refs/heads/*:refs/remotes/origin/* url = 仓库地址2 [branch \u0026#34;master\u0026#34;] remote = origin merge = refs/heads/master rebase = true   3. 操作 1  git push [分支]    pull 时默认仓库地址1\n ","description":"","id":8,"section":"docs","tags":null,"title":"配置多个远程Git仓库","uri":"https://yyrise.github.io/docs/docs/git/%E6%9C%AC%E5%9C%B0%E7%9B%AE%E5%BD%95%E9%85%8D%E7%BD%AE%E5%A4%9A%E4%B8%AA%E8%BF%9C%E7%A8%8Bgit%E4%BB%93%E5%BA%93/"},{"content":"参考\n 常用 Git 命令清单    Workspace：工作区 Index / Stage：暂存区 Repository：仓库区（或本地仓库） Remote：远程仓库   新建 创建一个新的 git 版本库。这个版本库的配置、存储等信息会被保存到.git 文件夹中\n1 2 3 4 5 6 7 8 9 10 11 12  # 初始化当前项目 $ git init # 新建一个目录，将其初始化为Git代码库 $ git init [project-name] # 在指定目录创建一个空的 Git 仓库。运行这个命令会创建一个名为 directory，只包含 .git 子目录的空目录。 $ git init --bare \u0026lt;directory\u0026gt; # 下载一个项目和它的整个代码历史 # 这个命令就是将一个版本库拷贝到另一个目录中，同时也将分支都拷贝到新的版本库中。这样就可以在新的版本库中提交到远程分支 $ git clone [url]   配置 更改设置。可以是版本库的设置，也可以是系统的或全局的\n也可以直接修改 .git/config 文件\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19  # 显示当前的Git配置 $ git config --list # 编辑Git配置文件 $ git config -e [--global] # 输出、设置基本的全局变量 $ git config --global user.email $ git config --global user.name $ git config --global user.email \u0026#34;MyEmail@gmail.com\u0026#34; $ git config --global user.name \u0026#34;My Name\u0026#34; # Git命令设置别名。 $ git config --global alias.\u0026lt;alias-name\u0026gt; \u0026lt;git-command\u0026gt; # 修改默认编辑器。 # 默认情况下，Git 会调用你通过环境变量 $VISUAL 或 $EDITOR 设置的文本编辑器， 如果没有设置，默认则会调用 vi 来创建和编辑你的提交以及标签信息。 $ git config --system core.editor \u0026lt;editor\u0026gt;   日志等信息 获取某些文件，某些分支，某次提交等 git 信息\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79  # 显示commit历史，以及每次commit发生变更的文件 $ git log --stat # 根据关键词搜索提交历史 $ git log -S [keyword] # 显示某个commit之后的所有变动，每个commit占据一行，只显示message $ git log [tag] HEAD --pretty=format:%s # 显示某个commit之后的所有变动，其\u0026#34;提交说明\u0026#34;必须符合搜索条件 $ git log [tag] HEAD --grep feature # 显示某个文件的版本历史，包括文件改名 $ git log --follow [file] $ git whatchanged [file] # 显示指定文件相关的每一次diff $ git log -p [file] # 显示过去5次提交（每行显示：hash值， message） $ git log -5 --pretty --oneline # 查看某些行的所有操作 $ git log -L 开始行号, 结束行号:文件 # 显示所有提交过的用户，按提交次数排序 $ git shortlog -sn # 追溯一个指定文件的历史修改记录 # 显示格式：commit ID (代码提交作者 提交时间 代码位于文件中的行数) 实际代码 $ git blame [filename] # 显示暂存区和工作区的差异 $ git diff # 显示暂存区和上一个commit的差异 $ git diff --cached [file] # 显示工作区与当前分支最新commit之间的差异 $ git diff HEAD # 显示两次提交之间的差异 $ git diff [first-branch]...[second-branch] # 显示今天你写了多少行代码 $ git diff --shortstat \u0026#34;@{0 day ago}\u0026#34; # 比较暂存区和版本库差异 $ git diff --staged # 比较暂存区和版本库差异 $ git diff --cached # 仅仅比较统计信息 $ git diff --stat # 显示某次提交的元数据和内容变化 $ git show [commit] # 显示某次提交发生变化的文件 $ git show --name-only [commit] # 显示某次提交时，某个文件的内容 $ git show [commit]:[filename] # 显示当前分支的最近几次提交 $ git reflog # 查看远程分支 $ git br -r # 查看各个分支最后提交信息 $ git br -v # 查看已经被合并到当前分支的分支 $ git br --merged # 查看尚未被合并到当前分支的分支 $ git br --no-merged   分支 管理分支，对分支进行增删改查切换等\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68  # 查看所有的分支和远程分支 $ git branch -a # 创建一个新的分支 $ git branch [branch-name] # 重命名分支 $ git branch -m \u0026lt;旧名称\u0026gt; \u0026lt;新名称\u0026gt; $ git branch -m branch-name new-branch-name # 编辑分支的介绍 $ git branch [branch-name] --edit-description # 列出所有本地分支 $ git branch # 列出所有远程分支 $ git branch -r # 新建一个分支，但依然停留在当前分支 $ git branch [branch-name] # 新建一个分支，并切换到该分支 $ git checkout -b [branch-name] # 新建一个分支，指向指定commit $ git branch [branch] [commit] # 新建一个分支，与指定的远程分支建立追踪关系 $ git branch --track [branch] [remote-branch] # 切换到指定分支，并更新工作区 $ git checkout [branch-name] # 切换到上一个分支 $ git checkout - # 本地分支与指定的远程分支之间建立追踪关系 $ git branch --set-upstream [branch] [remote-branch] # 合并指定分支到当前分支 $ git merge [branch] # 选择一个commit，合并进当前分支 $ git cherry-pick [commit] # 删除分支 $ git branch -d [branch-name] # 强制删除某个分支 (未被合并的分支被删除的时候需要强制) $ git br -D \u0026lt;branch\u0026gt; # 删除远程分支 $ git push origin --delete [branch-name ]$ git branch -dr [remote/branch] # 切换到某个分支 $ git co \u0026lt;branch\u0026gt; # 基于branch创建新的new_branch $ git co -b \u0026lt;new_branch\u0026gt; \u0026lt;branch\u0026gt; # 把某次历史提交记录checkout出来，但无分支信息，切换到其他分支会自动删除 $ git co commit_id # 把某次历史提交记录checkout出来，创建成一个分支 $ git co commit_id -b \u0026lt;new_branch\u0026gt;   远程同步 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31  # 下载远程仓库的所有变动 $ git fetch [remote] # 显示某个远程仓库的信息 $ git remote show [remote] # 增加一个新的远程仓库，并命名 $ git remote add [shortname] [url] # 查看远程服务器地址和仓库名称 $ git remote -v # 添加远程仓库地址 $ git remote add origin git@ github:xxx/xxx.git # 设置远程仓库地址(用于修改远程仓库地址) $ git remote set-url origin git@ github.com:xxx/xxx.git # 删除远程仓库 $ git remote rm \u0026lt;repository\u0026gt; # 上传本地指定分支到远程仓库# 把本地的分支更新到远端origin的master分支上# git push \u0026lt;远端\u0026gt; \u0026lt;分支\u0026gt; # git push 相当于 git push origin 当前分支 $ git push [remote] [branch] # 强行推送当前分支到远程仓库，即使有冲突 $ git push [remote] --force $ git push -f # 推送所有分支到远程仓库 $ git push [remote] --all   撤销 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45  # 恢复暂存区的指定文件到工作区 $ git checkout [file] # 恢复某个commit的指定文件到暂存区和工作区 $ git checkout [commit] [file] # 恢复暂存区的所有文件到工作区 $ git checkout . # 重置暂存区的指定文件，与上一次commit保持一致，但工作区不变 $ git reset [file] # 重置暂存区与工作区，与上一次commit保持一致 $ git reset --hard # 重置当前分支的指针为指定commit，同时重置暂存区，但工作区不变 $ git reset [commit] # 重置当前分支的HEAD为指定commit，同时重置暂存区和工作区，与指定commit一致 $ git reset --hard [commit] # 重置当前HEAD为指定commit，但保持暂存区和工作区不变 $ git reset --keep [commit] # 新建一个commit，用来撤销指定commit # 后者的所有变化都将被前者抵消，并且应用到当前分支 $ git revert [commit] # 恢复最后一次提交的状态 $ git revert HEAD # 暂时将未提交的变化移除，稍后再移入 $ git stash # 列所有stash $ git stash list # 恢复暂存的内容 $ git stash apply # 删除暂存区 $ git stash drop # 恢复并删除暂存区 $ git stash pop   grep 在版本库中快速查找\n1 2 3 4 5  # 显示搜索结果所在文件中的行号 $ git config --global grep.lineNumber true # 是搜索结果可读性更好 $ git config --global alias.g \u0026#34;grep --break --heading --line-number\u0026#34;   1 2 3 4 5 6  # 在所有的php文件中查找key_word $ git grep \u0026#39;key_word\u0026#39; -- \u0026#39;*.php\u0026#39; # 搜索包含 \u0026#34;arrayListName\u0026#34; 和, \u0026#34;add\u0026#34; 或 \u0026#34;remove\u0026#34; 的所有行 $ git grep -e \u0026#39;arrayListName\u0026#39; --and \\( -e add -e remove \\)   tag 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24  # 列出所有tag $ git tag # 在指定的commit上新建一个tag，默认当前commit $ git tag [tag] [commit] # 删除本地tag $ git tag -d [tag] # 删除远程tag $ git push origin :refs/tags/[tagName] # 查看tag信息 $ git show [tag] # 提交指定tag $ git push [remote] [tag] # 提交所有tag $ git push [remote] --tags # 新建一个分支，指向某个tag $ git checkout -b [branch] [tag]   reset 将当前的头指针复位到一个特定的状态。这样可以使你撤销 merge、pull、commits、add 等 这是个很强大的命令，但是在使用时一定要清楚其所产生的后果\n1 2 3 4 5 6 7 8 9 10 11 12 13  # 使 staging 区域恢复到上次提交时的状态，不改变现在的工作目录 $ git reset # 使 staging 区域恢复到上次提交时的状态，覆盖现在的工作目录 $ git reset --hard # 将当前分支恢复到某次提交，不改变现在的工作目录 # 在工作目录中所有的改变仍然存在 $ git reset dha78as # 将当前分支恢复到某次提交，覆盖现在的工作目录 # 并且删除所有未提交的改变和指定提交之后的所有提交 $ git reset --hard dha78as   其他 1 2 3 4 5 6 7 8 9 10 11  # 生成一个可供发布的压缩包 $ git archive # 打补丁 $ git apply ../sync.patch # 测试补丁能否成功 $ git apply --check ../sync.patch # 查看Git的版本 $ git --version   ","description":"","id":9,"section":"docs","tags":null,"title":"Git命令","uri":"https://yyrise.github.io/docs/docs/git/git%E5%91%BD%E4%BB%A4/"},{"content":"Lorem est tota propiore conpellat pectoribus de\npectora summo. Redit teque digerit hominumque toris verebor lumina non cervice\nsubde tollit usus habet Arctonque, furores quas nec ferunt. Quoque montibus nunc\ncaluere tempus\nThis article offers a sample of basic Markdown syntax that can be used in Hugo content files, also it shows whether basic HTML elements are decorated with CSS in a Hugo theme.\n Headings The following HTML \u0026lt;h1\u0026gt;—\u0026lt;h6\u0026gt; elements represent six levels of section headings. \u0026lt;h1\u0026gt; is the highest section level while \u0026lt;h6\u0026gt; is the lowest.\nH1 H2 H3 H4 H5 H6 Paragraph Xerum, quo qui aut unt expliquam qui dolut labo. Aque venitatiusda cum, voluptionse latur sitiae dolessi aut parist aut dollo enim qui voluptate ma dolestendit peritin re plis aut quas inctum laceat est volestemque commosa as cus endigna tectur, offic to cor sequas etum rerum idem sintibus eiur? Quianimin porecus evelectur, cum que nis nust voloribus ratem aut omnimi, sitatur? Quiatem. Nam, omnis sum am facea corem alique molestrunt et eos evelece arcillit ut aut eos eos nus, sin conecerem erum fuga. Ri oditatquam, ad quibus unda veliamenimin cusam et facea ipsamus es exerum sitate dolores editium rerore eost, temped molorro ratiae volorro te reribus dolorer sperchicium faceata tiustia prat.\nItatur? Quiatae cullecum rem ent aut odis in re eossequodi nonsequ idebis ne sapicia is sinveli squiatum, core et que aut hariosam ex eat.\nBlockquotes The blockquote element represents content that is quoted from another source, optionally with a citation which must be within a footer or cite element, and optionally with in-line changes such as annotations and abbreviations.\nBlockquote without attribution  Tiam, ad mint andaepu dandae nostion secatur sequo quae.\nNote that you can use Markdown syntax within a blockquote.\n Blockquote with attribution  Don\u0026rsquo;t communicate by sharing memory, share memory by communicating.\n— Rob Pike1\n Tables Tables aren\u0026rsquo;t part of the core Markdown spec, but Hugo supports supports them out-of-the-box.\n   Name Age     Bob 27   Alice 23    Inline Markdown within tables    Inline  Markdown  In  Table     italics bold strikethrough  code    Code Blocks Code block with backticks html \u0026lt;!DOCTYPE html\u0026gt; \u0026lt;html lang=\u0026quot;en\u0026quot;\u0026gt; \u0026lt;head\u0026gt; \u0026lt;meta charset=\u0026quot;UTF-8\u0026quot;\u0026gt; \u0026lt;title\u0026gt;Example HTML5 Document\u0026lt;/title\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;p\u0026gt;Test\u0026lt;/p\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; Code block indented with four spaces \u0026lt;!DOCTYPE html\u0026gt; \u0026lt;html lang=\u0026quot;en\u0026quot;\u0026gt; \u0026lt;head\u0026gt; \u0026lt;meta charset=\u0026quot;UTF-8\u0026quot;\u0026gt; \u0026lt;title\u0026gt;Example HTML5 Document\u0026lt;/title\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;p\u0026gt;Test\u0026lt;/p\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt;  Code block with Hugo\u0026rsquo;s internal highlight shortcode 1 2 3 4 5 6 7 8 9 10  \u0026lt;!DOCTYPE html\u0026gt; \u0026lt;html lang=\u0026#34;en\u0026#34;\u0026gt; \u0026lt;head\u0026gt; \u0026lt;meta charset=\u0026#34;UTF-8\u0026#34;\u0026gt; \u0026lt;title\u0026gt;Example HTML5 Document\u0026lt;/title\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;p\u0026gt;Test\u0026lt;/p\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt;   List Types Ordered List  First item Second item Third item  Unordered List  List item Another item And another item  Nested list  Item  First Sub-item Second Sub-item    Other Elements — abbr, sub, sup, kbd, mark GIF is a bitmap image format.\nH2O\nXn + Yn = Zn\nPress CTRL+ALT+Delete to end the session.\nMost salamanders are nocturnal, and hunt for insects, worms, and other small creatures.\n The above quote is excerpted from Rob Pike\u0026rsquo;s talk during Gopherfest, November 18, 2015. \u0026#x21a9;\u0026#xfe0e;\n  ","description":"","id":10,"section":"blog","tags":["markdown","css","html","themes"],"title":"Markdown Syntax Guide","uri":"https://yyrise.github.io/docs/blog/markdown-syntax/"},{"content":"This article offers a sample of basic Markdown syntax that can be used in Hugo content files, also it shows whether basic HTML elements are decorated with CSS in a Hugo theme.\nHeadings The following HTML \u0026lt;h1\u0026gt;—\u0026lt;h6\u0026gt; elements represent six levels of section headings. \u0026lt;h1\u0026gt; is the highest section level while \u0026lt;h6\u0026gt; is the lowest.\nH1 H2 H3 H4 H5 H6 Paragraph Xerum, quo qui aut unt expliquam qui dolut labo. Aque venitatiusda cum, voluptionse latur sitiae dolessi aut parist aut dollo enim qui voluptate ma dolestendit peritin re plis aut quas inctum laceat est volestemque commosa as cus endigna tectur, offic to cor sequas etum rerum idem sintibus eiur? Quianimin porecus evelectur, cum que nis nust voloribus ratem aut omnimi, sitatur? Quiatem. Nam, omnis sum am facea corem alique molestrunt et eos evelece arcillit ut aut eos eos nus, sin conecerem erum fuga. Ri oditatquam, ad quibus unda veliamenimin cusam et facea ipsamus es exerum sitate dolores editium rerore eost, temped molorro ratiae volorro te reribus dolorer sperchicium faceata tiustia prat.\nItatur? Quiatae cullecum rem ent aut odis in re eossequodi nonsequ idebis ne sapicia is sinveli squiatum, core et que aut hariosam ex eat.\nBlockquotes The blockquote element represents content that is quoted from another source, optionally with a citation which must be within a footer or cite element, and optionally with in-line changes such as annotations and abbreviations.\nBlockquote without attribution  Tiam, ad mint andaepu dandae nostion secatur sequo quae.\nNote that you can use Markdown syntax within a blockquote.\n Blockquote with attribution  Don\u0026rsquo;t communicate by sharing memory, share memory by communicating.\n— Rob Pike1\n Tables Tables aren\u0026rsquo;t part of the core Markdown spec, but Hugo supports supports them out-of-the-box.\n   Name Age     Bob 27   Alice 23    Inline Markdown within tables    Inline  Markdown  In  Table     italics bold strikethrough  code    Code Blocks Code block with backticks html \u0026lt;!DOCTYPE html\u0026gt; \u0026lt;html lang=\u0026quot;en\u0026quot;\u0026gt; \u0026lt;head\u0026gt; \u0026lt;meta charset=\u0026quot;UTF-8\u0026quot;\u0026gt; \u0026lt;title\u0026gt;Example HTML5 Document\u0026lt;/title\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;p\u0026gt;Test\u0026lt;/p\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; Code block indented with four spaces \u0026lt;!DOCTYPE html\u0026gt; \u0026lt;html lang=\u0026quot;en\u0026quot;\u0026gt; \u0026lt;head\u0026gt; \u0026lt;meta charset=\u0026quot;UTF-8\u0026quot;\u0026gt; \u0026lt;title\u0026gt;Example HTML5 Document\u0026lt;/title\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;p\u0026gt;Test\u0026lt;/p\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt;  Code block with Hugo\u0026rsquo;s internal highlight shortcode 1 2 3 4 5 6 7 8 9 10  \u0026lt;!DOCTYPE html\u0026gt; \u0026lt;html lang=\u0026#34;en\u0026#34;\u0026gt; \u0026lt;head\u0026gt; \u0026lt;meta charset=\u0026#34;UTF-8\u0026#34;\u0026gt; \u0026lt;title\u0026gt;Example HTML5 Document\u0026lt;/title\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;p\u0026gt;Test\u0026lt;/p\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt;   List Types Ordered List  First item Second item Third item  Unordered List  List item Another item And another item  Nested list  Item  First Sub-item Second Sub-item    Other Elements — abbr, sub, sup, kbd, mark GIF is a bitmap image format.\nH2O\nXn + Yn = Zn\nPress CTRL+ALT+Delete to end the session.\nMost salamanders are nocturnal, and hunt for insects, worms, and other small creatures.\n The above quote is excerpted from Rob Pike\u0026rsquo;s talk during Gopherfest, November 18, 2015. \u0026#x21a9;\u0026#xfe0e;\n  ","description":"Sample article showcasing basic Markdown syntax and formatting for HTML elements.","id":11,"section":"docs","tags":["markdown","css","html","themes"],"title":"Section","uri":"https://yyrise.github.io/docs/docs/contentmanagement/sections/"},{"content":"Lorem est tota propiore conpellat pectoribus de\npectora summo. Redit teque digerit hominumque toris verebor lumina non cervice\nsubde tollit usus habet Arctonque, furores quas nec ferunt. Quoque montibus nunc\ncaluere tempus\ninhospita parcite confusaque translucet patri vestro qui optatis\nlumine cognoscere flos nubis! Fronde ipsamque patulos Dryopen deorum.\n Exierant elisi ambit vivere dedere Duce pollice Eris modo Spargitque ferrea quos palude  Rursus nulli murmur; hastile inridet ut ab gravi sententia! Nomine potitus\nsilentia flumen, sustinet placuit petis in dilapsa erat sunt. Atria\ntractus malis.\n Comas hunc haec pietate fetum procerum dixit Post torum vates letum Tiresia Flumen querellas Arcanaque montibus omnes Quidem et  Vagus elidunt \nThe Van de Graaf Canon\nMane refeci capiebant unda mulcebat Victa caducifer, malo vulnere contra\ndicere aurato, ludit regale, voca! Retorsit colit est profanae esse virescere\nfurit nec; iaculi matertera et visa est, viribus. Divesque creatis, tecta novat collumque vulnus est, parvas. Faces illo pepulere tempus adest. Tendit flamma, ab opes virum sustinet, sidus sequendo urbis.\nIubar proles corpore raptos vero auctor imperium; sed et huic: manus caeli\nLelegas tu lux. Verbis obstitit intus oblectamina fixis linguisque ausus sperare\nEchionides cornuaque tenent clausit possit. Omnia putatur. Praeteritae refert\nausus; ferebant e primus lora nutat, vici quae mea ipse. Et iter nil spectatae\nvulnus haerentia iuste et exercebat, sui et.\nEurytus Hector, materna ipsumque ut Politen, nec, nate, ignari, vernum cohaesit sequitur. Vel mitis temploque vocatus, inque alis, oculos nomen non silvis corpore coniunx ne displicet illa. Crescunt non unus, vidit visa quantum inmiti flumina mortis facto sic: undique a alios vincula sunt iactata abdita! Suspenderat ego fuit tendit: luna, ante urbem\nPropoetides parte.\n","description":"","id":12,"section":"blog","tags":["markdown","text"],"title":"Placeholder Text","uri":"https://yyrise.github.io/docs/blog/placeholder-text/"},{"content":"Lorem est tota propiore conpellat pectoribus de\npectora summo. Redit teque digerit hominumque toris verebor lumina non cervice\nsubde tollit usus habet Arctonque, furores quas nec ferunt. Quoque montibus nunc\ncaluere tempus\nEmoji can be enabled in a Hugo project in a number of ways.\n The emojify function can be called directly in templates or Inline Shortcodes.\nTo enable emoji globally, set enableEmoji to true in your site’s configuration and then you can type emoji shorthand codes directly in content files; e.g.\n🙈 🙈 🙉 🙉 🙊 🙊\nThe Emoji cheat sheet is a useful reference for emoji shorthand codes.\nN.B. The above steps enable Unicode Standard emoji characters and sequences in Hugo, however the rendering of these glyphs depends on the browser and the platform. To style the emoji you can either use a third party emoji font or a font stack; e.g.\n1 2 3  .emoji { font-family: Apple Color Emoji,Segoe UI Emoji,NotoColorEmoji,Segoe UI Symbol,Android Emoji,EmojiSymbols; }  ","description":"","id":13,"section":"blog","tags":["emoji"],"title":"Emoji Support","uri":"https://yyrise.github.io/docs/blog/emoji-support/"}]